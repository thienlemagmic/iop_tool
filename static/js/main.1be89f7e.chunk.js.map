{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","request","require","Date","setMonth","startDate","setStartDate","endDate","setEndDate","React","useRef","className","src","logo","alt","dateFormat","selected","onChange","date","onSubmit","e","preventDefault","console","log","startingDate","endingDate","getTime","zip","json","process","getShortDateString","toISOString","split","replaceAll","url","method","headers","error","response","body","statusCode","forEach","element","csv","id","file","generateAsync","type","then","content","blob","fileName","document","createElement","Blob","href","URL","createObjectURL","download","appendChild","click","saveAs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mfAAe,MAA0B,iC,4CC4I1BA,MAnIf,WACE,MAAsCC,mBAAS,MAA/C,mBAMIC,GANJ,UAMcC,EAAQ,MAEtB,EAAkCF,oBAAS,IAAIG,MAAOC,SAAS,IAA/D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BN,mBAAS,IAAIG,MAA3C,mBAAOI,EAAP,KAAgBC,EAAhB,KAiFA,OAhFoBC,IAAMC,OAAO,MAiF/B,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,yDAIA,qCAIA,cAAC,IAAD,CACAC,WAAa,aACXC,SAAUX,EACVY,SAAU,SAAAC,GAAI,OAAIZ,EAAaY,MAGjC,mCAGA,cAAC,IAAD,CACAH,WAAa,aACXC,SAAUT,EACVU,SAAU,SAAAC,GAAI,OAAIV,EAAWU,MAG/B,sBAKA,sBAAMC,SA9GZ,SAAsBC,GACpBA,EAAEC,iBACFC,QAAQC,IAAI,uBACZ,IAAIC,EAAe,IAAIrB,KAAKE,GACxBoB,EAAa,IAAItB,KAAKI,GAC1Be,QAAQC,IAAIC,EAAaE,WACzBJ,QAAQC,IAAIE,EAAWC,WAEvB,IACIC,EAAM,IADEzB,EAAQ,MAGhB0B,EAAO,CACT,MAAS,QACT,WAAc,kBACd,aAAgBC,uCAChB,QAAW,eACX,UAAa,WACb,KAAQ,CACN,MAAS,CACP,WAAc,eACd,UAAa,CAAE,KAASL,EAAaE,UAAW,KAASD,EAAWC,YAEtE,QAAW,GAGX,WAAc,IAqClB,SAASI,EAAmBZ,GAC1B,OAAOA,EAAKa,cAAcC,MAAM,KAAK,GAAGC,WAAW,IAAK,IAlC1DX,QAAQC,IAAIK,GAIZ3B,EAAQ,CACNiC,IAHQ,yDAIRC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBR,KAAMA,IACL,SAAUS,EAAOC,EAAUC,IAC5BjB,QAAQC,IAAIe,GACPD,GAAiC,MAAxBC,EAASE,aAerBlB,QAAQC,IAAI,UAAYc,GACxBf,QAAQC,IAAI,wBAA0Be,EAASE,cAf9BD,EAAI,WACVE,SAAQ,SAAAC,GACjB,IAAIC,EAAMD,EAAO,KAAP,IACNE,EAAKF,EAAO,QAChBf,EAAIkB,KAAKD,EAAK,OAAQD,MAGxBhB,EAAImB,cAAc,CAAEC,KAAM,SACvBC,MAAK,SAAUC,IAgBtB,SAAgBC,EAAMC,GACpB,IAAMT,EAAUU,SAASC,cAAc,KACjCR,EAAO,IAAIS,KAAK,CAACJ,GAAO,CAAEH,KAAM,eACtCL,EAAQa,KAAOC,IAAIC,gBAAgBZ,GACnCH,EAAQgB,SAAWP,EACnBC,SAASb,KAAKoB,YAAYjB,GAC1BA,EAAQkB,QApBFC,CAAOZ,EADQ,OAASnB,EAAmBN,GAAgB,IAAMM,EAAmBL,GAAa,gBA0DrG,SACE,wBAAQsB,KAAK,SAAb,8BCzHKe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BX,M","file":"static/js/main.1be89f7e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useState, useCallback } from \"react\";\nimport DatePicker from \"react-datepicker\";\n\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction App() {\n  const [checkInDate, setCheckInDate] = useState(null);\n\n  const handleCheckInDate = (date) => {\n    setCheckInDate(date);\n  };\n\n  var request = require(\"request\");\n\n  const [startDate, setStartDate] = useState(new Date().setMonth(0));\n  const [endDate, setEndDate] = useState(new Date());\n  const folderInput = React.useRef(null);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log('You clicked submit.');\n    var startingDate = new Date(startDate);\n    var endingDate = new Date(endDate);\n    console.log(startingDate.getTime());\n    console.log(endingDate.getTime());\n\n    var JSZip = require(\"jszip\");\n    var zip = new JSZip();\n\n    var json = {\n      \"appId\": \"13797\",\n      \"serverName\": \"PlayerLogServer\",\n      \"serverSecret\": process.env.REACT_APP_SERVER_SECRECT,\n      \"service\": \"globalEntity\",\n      \"operation\": \"GET_LIST\",\n      \"data\": {\n        \"where\": {\n          \"entityType\": \"player_log_2\",\n          \"updatedAt\": { \"$gte\" : startingDate.getTime(), \"$lte\" : endingDate.getTime()},\n        },\n        \"orderBy\": {\n\n        },\n        \"maxReturn\": -1\n      }\n    };\n\n    console.log(json);\n\n    var url = \"https://sharedprod.braincloudservers.com/s2sdispatcher\";\n\n    request({\n      url: url,\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      json: json\n    }, function (error, response, body) {\n      console.log(response);\n      if (!error && response.statusCode === 200) {\n        var entityList = body['entityList'];\n        entityList.forEach(element => {\n          var csv = element['data']['csv'];\n          var id = element['ownerId'];\n          zip.file(id + \".csv\", csv);\n        });\n\n        zip.generateAsync({ type: \"blob\" })\n          .then(function (content) {\n            var fileName = \"log_\" + getShortDateString(startingDate) + \"_\" + getShortDateString(endingDate) +\".zip\";\n            saveAs(content, fileName);\n          });\n      }\n      else {\n        console.log(\"error: \" + error);\n        console.log(\"response.statusCode: \" + response.statusCode);\n      }\n    });\n\n    function getShortDateString(date) {\n      return date.toISOString().split('T')[0].replaceAll('-', '');\n    }\n\n\n    function saveAs(blob, fileName) {\n      const element = document.createElement(\"a\");\n      const file = new Blob([blob], { type: 'text/plain' });\n      element.href = URL.createObjectURL(file);\n      element.download = fileName;\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Download All Player Logs\n        </p>\n\n        <p>\n\n          From\n        </p>\n        <DatePicker\n        dateFormat = \"dd-MM-yyyy\"\n          selected={startDate}\n          onChange={date => setStartDate(date)}\n        />\n\n        <p>\n          To\n        </p>\n        <DatePicker\n        dateFormat = \"dd-MM-yyyy\"\n          selected={endDate}\n          onChange={date => setEndDate(date)}\n        />\n\n        <p>\n\n\n        </p>\n\n        <form onSubmit={handleSubmit}>\n          <button type=\"submit\">Download</button>\n        </form>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}